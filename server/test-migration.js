import dotenv from 'dotenv'
import sequelize, { testConnection, syncDatabase } from './config/database.js'
import User from './models/User.js'

// Cargar variables de entorno
dotenv.config({ path: '../.env' })

console.log('üß™ Probando migraci√≥n completa a MySQL...\n')

const testMigration = async () => {
  try {
    // 1. Probar conexi√≥n
    console.log('1Ô∏è‚É£ Probando conexi√≥n a MySQL...')
    const connectionTest = await testConnection()
    
    if (!connectionTest) {
      console.log('‚ùå No se pudo conectar a MySQL')
      return
    }

    // 2. Sincronizar base de datos
    console.log('\n2Ô∏è‚É£ Sincronizando base de datos...')
    const syncTest = await syncDatabase(false) // false = no forzar recreaci√≥n
    
    if (!syncTest) {
      console.log('‚ùå Error en la sincronizaci√≥n')
      return
    }

    // 3. Probar creaci√≥n de usuario
    console.log('\n3Ô∏è‚É£ Probando creaci√≥n de usuario...')
    
    const testUser = await User.create({
      nombre: 'Usuario de Prueba',
      email: 'test@easyclase.com',
      password: 'password123',
      tipo: 'estudiante',
      telefono: '+573001234567',
      pais: 'Colombia',
      ciudad: 'Bogot√°'
    })

    console.log('‚úÖ Usuario creado exitosamente:', testUser.toPublicJSON())

    // 4. Probar b√∫squeda de usuario
    console.log('\n4Ô∏è‚É£ Probando b√∫squeda de usuario...')
    
    const foundUser = await User.findOne({
      where: { email: 'test@easyclase.com' }
    })

    if (foundUser) {
      console.log('‚úÖ Usuario encontrado:', foundUser.toPublicJSON())
    } else {
      console.log('‚ùå Usuario no encontrado')
    }

    // 5. Probar comparaci√≥n de contrase√±as
    console.log('\n5Ô∏è‚É£ Probando comparaci√≥n de contrase√±as...')
    
    const passwordMatch = await foundUser.comparePassword('password123')
    console.log('‚úÖ Contrase√±a correcta:', passwordMatch)

    const passwordMismatch = await foundUser.comparePassword('wrongpassword')
    console.log('‚úÖ Contrase√±a incorrecta rechazada:', !passwordMismatch)

    // 6. Probar actualizaci√≥n de usuario
    console.log('\n6Ô∏è‚É£ Probando actualizaci√≥n de usuario...')
    
    await foundUser.update({
      nombre: 'Usuario Actualizado',
      ciudad: 'Medell√≠n'
    })

    console.log('‚úÖ Usuario actualizado:', foundUser.toPublicJSON())

    // 7. Limpiar usuario de prueba
    console.log('\n7Ô∏è‚É£ Limpiando usuario de prueba...')
    
    await foundUser.destroy()
    console.log('‚úÖ Usuario de prueba eliminado')

    // 8. Verificar eliminaci√≥n
    const deletedUser = await User.findOne({
      where: { email: 'test@easyclase.com' }
    })

    if (!deletedUser) {
      console.log('‚úÖ Usuario eliminado correctamente')
    } else {
      console.log('‚ùå Usuario no se elimin√≥ correctamente')
    }

    console.log('\nüéâ ¬°Migraci√≥n a MySQL completada exitosamente!')
    console.log('‚úÖ La base de datos est√° funcionando correctamente')
    console.log('‚úÖ Los modelos est√°n configurados correctamente')
    console.log('‚úÖ Las operaciones CRUD funcionan correctamente')
    
    console.log('\nüöÄ Ahora puedes:')
    console.log('   - Migrar todos los modelos restantes')
    console.log('   - Actualizar los controladores')
    console.log('   - Probar la aplicaci√≥n completa')
    console.log('   - Desplegar en producci√≥n')

  } catch (error) {
    console.error('‚ùå Error en la migraci√≥n:', error)
  } finally {
    // Cerrar conexi√≥n
    await sequelize.close()
    console.log('\nüîå Conexi√≥n a MySQL cerrada')
  }
}

// Ejecutar las pruebas
testMigration()

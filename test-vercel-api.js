// Script para probar la API de EasyClase en Vercel
// Ejecutar: node test-vercel-api.js

const API_BASE = 'https://easyclase.vercel.app/api';

async function testAPI() {
  console.log('üß™ Probando API de EasyClase en Vercel...\n');

  try {
    // 1. Probar endpoint de estado
    console.log('1Ô∏è‚É£ Probando /api/status...');
    const statusResponse = await fetch(`${API_BASE}/status`);
    const statusData = await statusResponse.json();
    
    if (statusResponse.ok) {
      console.log('‚úÖ Status API:', statusData.message);
      console.log('üåç Entorno:', statusData.environment);
    } else {
      console.log('‚ùå Error en Status API:', statusData.message);
    }

    // 2. Probar endpoint de profesores (p√∫blico)
    console.log('\n2Ô∏è‚É£ Probando /api/profesores...');
    const profesoresResponse = await fetch(`${API_BASE}/profesores`);
    const profesoresData = await profesoresResponse.json();
    
    if (profesoresResponse.ok) {
      console.log('‚úÖ Profesores API:', `Encontrados ${profesoresData.data?.profesores?.length || 0} profesores`);
    } else {
      console.log('‚ùå Error en Profesores API:', profesoresData.message);
    }

    // 3. Probar endpoint de categor√≠as
    console.log('\n3Ô∏è‚É£ Probando /api/profesores/categorias...');
    const categoriasResponse = await fetch(`${API_BASE}/profesores/categorias`);
    const categoriasData = await categoriasResponse.json();
    
    if (categoriasResponse.ok) {
      console.log('‚úÖ Categor√≠as API:', `Encontradas ${categoriasData.data?.categorias?.length || 0} categor√≠as`);
    } else {
      console.log('‚ùå Error en Categor√≠as API:', categoriasData.message);
    }

    // 4. Probar endpoint de clases (requiere autenticaci√≥n)
    console.log('\n4Ô∏è‚É£ Probando /api/clases/mis-clases (sin token)...');
    const clasesResponse = await fetch(`${API_BASE}/clases/mis-clases`);
    const clasesData = await clasesResponse.json();
    
    if (clasesResponse.status === 401) {
      console.log('‚úÖ Clases API: Correctamente protegida (requiere autenticaci√≥n)');
    } else if (clasesResponse.ok) {
      console.log('‚ö†Ô∏è Clases API: Respondi√≥ sin autenticaci√≥n (problema de seguridad)');
    } else {
      console.log('‚ùå Error en Clases API:', clasesData.message);
    }

    // 5. Probar endpoint de servicios
    console.log('\n5Ô∏è‚É£ Probando /api/servicios...');
    const serviciosResponse = await fetch(`${API_BASE}/servicios`);
    const serviciosData = await serviciosResponse.json();
    
    if (serviciosResponse.ok) {
      console.log('‚úÖ Servicios API:', `Encontrados ${serviciosData.data?.servicios?.length || 0} servicios`);
    } else {
      console.log('‚ùå Error en Servicios API:', serviciosData.message);
    }

    console.log('\nüéØ Resumen de la prueba:');
    console.log('‚úÖ Status API:', statusResponse.ok ? 'FUNCIONA' : 'FALLA');
    console.log('‚úÖ Profesores API:', profesoresResponse.ok ? 'FUNCIONA' : 'FALLA');
    console.log('‚úÖ Categor√≠as API:', categoriasResponse.ok ? 'FUNCIONA' : 'FALLA');
    console.log('‚úÖ Clases API:', clasesResponse.status === 401 ? 'PROTEGIDA' : 'PROBLEMA');
    console.log('‚úÖ Servicios API:', serviciosResponse.ok ? 'FUNCIONA' : 'FALLA');

    if (statusResponse.ok && profesoresResponse.ok) {
      console.log('\nüéâ ¬°La API est√° funcionando correctamente en Vercel!');
      console.log('üìù Ahora puedes configurar las variables de entorno para funcionalidades completas.');
    } else {
      console.log('\nüö® Hay problemas con la API. Verifica la configuraci√≥n de Vercel.');
    }

  } catch (error) {
    console.error('\nüí• Error durante la prueba:', error.message);
    console.log('\nüîç Posibles causas:');
    console.log('- El proyecto no est√° desplegado en Vercel');
    console.log('- La URL de la API es incorrecta');
    console.log('- Problemas de red o CORS');
  }
}

// Ejecutar la prueba
testAPI();
